from datetime import datetime
from colorsys import rgb_to_hsv
from os.path import exists
from sys import exit

FILE_DAT = "led_usage_log.dat"
WEB_ROOT = "/var/www/api/led_control/"
FILE_CANONICAL = WEB_ROOT + "canonical"


DAT_HEADER = "#\n# File generated by ml_analytics.py\n# Each row represents the lighting status at the time of polling\n# Format:\n# day_of_year,day_of_week,second_of_day:rgb,hue,saturation,value\n# , where rgb is a string representing an rgb color e.g. purple would be represented as '255 0 255'\n#\n\n"

def read_line(file, line_number=0):
    line = ""
    with open(file, 'r') as f:
        try:
            line = f.readlines()[line_number]
        except:
            pass
    return line

def string_to_rgb(string):
    r, g, b = [int(x) for x in string.split(" ")]
    return (r, g, b)

now = datetime.now()
day_of_year = now.timetuple().tm_yday
day_of_week = now.timetuple().tm_wday

midnight = now.replace(hour=0, minute=0, second=0, microsecond=0)
second_of_day = (now - midnight).seconds

rgb_string = read_line(FILE_CANONICAL)
if rgb_string is "":
    print("File could not be read properly: color is empty")
    exit(0)
rgb_string = rgb_string.strip()
r, g, b = string_to_rgb(rgb_string)
hue, sat, val = rgb_to_hsv(r, g, b)

file_already_exists = exists(FILE_DAT)

with open(FILE_DAT, 'a') as f:
    if not file_already_exists:
        f.write(DAT_HEADER)
    
    f.write("{},{},{}:{},{},{},{}\n".format(day_of_year, day_of_week, second_of_day, rgb_string, hue, sat, val))

